# -*- coding: utf-8 -*-
"""Driving Behavior.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w4IIEpR0QamsXqebgjnVDf-zOVdaKEQt
"""

import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder

from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import LinearSVC, SVC
from sklearn.neural_network import MLPClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.ensemble import BaggingClassifier

import warnings
warnings.filterwarnings('ignore')

# Mounting Google Drive
from google.colab import drive
drive.mount('/content/drive')

from google.colab import files
uploaded = files.upload()

data = pd.read_csv('train_motion_data.csv')
test = pd.read_csv('test_motion_data.csv')

data

data.info()

data.describe()

data.isna().sum()

data.dtypes

data['Class'].value_counts()

data['Class'] = data['Class'].replace({'SLOW'       : 0,
                                       'NORMAL'     : 1,
                                       'AGGRESSIVE' : 2})

import matplotlib.pyplot as plt
import seaborn as sns

from matplotlib import pyplot
data.hist()
pyplot.show()

def preprocess_inputs(df):
    df = df.copy()
    df['Timestamp'] = df['Timestamp']/60 
    
    y = df['Class']
    X = df.drop('Class',axis=1)
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.3, shuffle=True, random_state=43)
    
    scaler = StandardScaler()
    scaler.fit(X_train)
    
    X_train = pd.DataFrame(scaler.transform(X_train),columns = X_train.columns, index=X_train.index)
    X_test = pd.DataFrame(scaler.transform(X_test),columns = X_test.columns, index=X_test.index)    
    
    return X_train, X_test, y_train, y_test

X_train, X_test, y_train, y_test = preprocess_inputs(data)

X_train

print(X_train)

print(y_train)

print(X_test)



print(y_test)

from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)

models = {
    '        Logistic Regression' : LogisticRegression(),
    '              Decision Tree' : DecisionTreeClassifier(),
    '              Random Forest' : RandomForestClassifier(),
    '             Neural Network' : MLPClassifier(),
    '                 K-Neighbors': KNeighborsClassifier(),
    'Gradient Boosting Classifier': GradientBoostingClassifier(),
    '          Bagging Classifier': BaggingClassifier(),
    '                  Linear SVM': LinearSVC(),
    '                  Kernel SVM': SVC()    
}

for name, model in models.items():
    model = model.fit(X_train,y_train)
    print(name + " trained")

for name, model in models.items():
    print(name + ": {:.2f}%".format(model.score(X_test, y_test) * 100))

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform (X_test)
print(np.mean(X_train))
print(np.std(X_train))

"""========================Logistic Regression=======================

"""

from sklearn.linear_model import LogisticRegression
log_reg = LogisticRegression()
log_reg.fit(X_train, y_train.values.ravel())
y_pred0 = log_reg.predict(X_test)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred0)
print('Confusion matrix: ')
print(cm)

from sklearn.metrics import accuracy_score
print('Accuracy: %.3f' % (accuracy_score(y_test, y_pred0)*100))
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
precision = precision_score(y_test, y_pred0, average='weighted')
print('Precision: %.3f' % (precision*100))
recall = recall_score(y_test, y_pred0, average='weighted')
print('Recall: %.3f' % (recall*100))
score = f1_score(y_test, y_pred0, average='weighted')
print('F-Measure: %.3f' % (score*100))

score = log_reg.score(X_test, y_test)
print(score)

from google.colab import drive
drive.mount('/content/drive')

import pickle 
print("[INFO] Saving model...")
saved_model0=pickle.dump(log_reg,open('/content/drive/My Drive/Colab Notebooks/Logistic_MajorX.pkl', 'wb'))

model0 = pickle.load(open('/content/drive/My Drive/Colab Notebooks/Logistic_MajorX.pkl','rb'))
model0.predict(X_test)

"""===========KNN Algorithm========================"""

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.neighbors import KNeighborsClassifier
classifier =  KNeighborsClassifier(n_neighbors = 15, metric = 'minkowski', p = 2)
classifier.fit(X_train, y_train)

y_pred1 = classifier.predict(X_test)
y_pred1

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred1)
print('Confusion matrix: ')
print(cm)

from sklearn.metrics import accuracy_score
print('Accuracy: %.2f' % (accuracy_score(y_test, y_pred1)*100))
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
precision = precision_score(y_test, y_pred1, average='weighted')
print('Precision: %.2f' % (precision*100))
recall = recall_score(y_test, y_pred1, average='weighted')
print('Recall: %.3f' % (recall*100))
score = f1_score(y_test, y_pred1, average='weighted')
print('F-Measure: %.3f' % (score*100))

import pickle 
print("[INFO] Saving model...")
saved_model1=pickle.dump(classifier,open('/content/drive/My Drive/Colab Notebooks/KNN_MajorX.pkl', 'wb'))

model1 = pickle.load(open('/content/drive/My Drive/Colab Notebooks/KNN_MajorX.pkl','rb'))
model1.predict(X_test)

"""============Decision Tree=============="""

from sklearn.tree import DecisionTreeClassifier
classifier1 = DecisionTreeClassifier(criterion = 'entropy', random_state = 5)
classifier1.fit(X_train, y_train)

y_pred2 = classifier1.predict(X_test)
y_pred2

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred2)
print('Confusion matrix: ')
print(cm)

from sklearn.metrics import accuracy_score
print('Accuracy: %.2f' % (accuracy_score(y_test, y_pred2)*100))
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
precision = precision_score(y_test, y_pred2, average='weighted')
print('Precision: %.2f' % (precision*100))
recall = recall_score(y_test, y_pred2, average='weighted')
print('Recall: %.3f' % (recall*100))
score = f1_score(y_test, y_pred2, average='weighted')
print('F-Measure: %.3f' % (score*100))

import pickle 
print("[INFO] Saving model...")
saved_model2=pickle.dump(classifier1,open('/content/drive/My Drive/Colab Notebooks/Decision-Tree_MajorX.pkl', 'wb'))

model2 = pickle.load(open('/content/drive/My Drive/Colab Notebooks/Decision-Tree_MajorX.pkl','rb'))
model2.predict(X_test)

"""===========Random Forest Alogorithm=================="""

from sklearn.ensemble import RandomForestClassifier
classifier_Random = RandomForestClassifier(n_estimators = 300, criterion = 'entropy', random_state = 5)
classifier_Random.fit(X_train, y_train)

y_pred3 = classifier_Random.predict(X_test)
y_pred3

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred3)
print('Confusion matrix: ')
print(cm)

from sklearn.metrics import accuracy_score
print('Accuracy: %.2f' % (accuracy_score(y_test, y_pred3)*100))
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
precision = precision_score(y_test, y_pred3, average='weighted')
print('Precision: %.2f' % (precision*100))
recall = recall_score(y_test, y_pred3, average='weighted')
print('Recall: %.3f' % (recall*100))
score = f1_score(y_test, y_pred3, average='weighted')
print('F-Measure: %.3f' % (score*100))





import pickle 
print("[INFO] Saving model...")
saved_model3=pickle.dump(classifier_Random,open('/content/drive/My Drive/Colab Notebooks/Random-Forest_MajorX.pkl', 'wb'))

model3 = pickle.load(open('/content/drive/My Drive/Colab Notebooks/Random-Forest_MajorX.pkl','rb'))
model3.predict(X_test)

"""===============SVM Algorithm============"""

from sklearn.svm import SVC
classifier2 = SVC(kernel = 'rbf', random_state = 5, probability=True)
classifier2.fit(X_train, y_train)

y_pred4 = classifier2.predict(X_test)
y_pred4

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred4)
print('Confusion matrix: ')
print(cm)

from sklearn.metrics import accuracy_score
print('Accuracy: %.2f' % (accuracy_score(y_test, y_pred4)*100))
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
precision = precision_score(y_test, y_pred4, average='weighted')
print('Precision: %.2f' % (precision*100))
recall = recall_score(y_test, y_pred4, average='weighted')
print('Recall: %.3f' % (recall*100))
score = f1_score(y_test, y_pred4, average='weighted')
print('F-Measure: %.3f' % (score*100))

import pickle 
print("[INFO] Saving model...")
saved_model4=pickle.dump(classifier2,open('/content/drive/My Drive/Colab Notebooks/SVM_MajorX.pkl', 'wb'))

model4 = pickle.load(open('/content/drive/My Drive/Colab Notebooks/SVM_MajorX.pkl','rb'))
model4.predict(X_test)

!pip install streamlit==1.1.0

# Mounting Google Drive
from google.colab import drive
drive.mount('/content/drive')

!pip install flask-ngrok

# Commented out IPython magic to ensure Python compatibility.
# %mkdir templates -p

# Commented out IPython magic to ensure Python compatibility.
# %%writefile templates/index.html
# <!DOCTYPE html>
# <html >
# <!--From https://codepen.io/frytyler/pen/EGdtg-->
# <head>
# <title>Machine Learning KNN Deployment</title>
# <meta charset="UTF-8">
# <link href='https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300' rel='stylesheet' type='text/css'>
# <!-- JavaScript Bundle with Popper -->
# <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" crossorigin="anonymous"></script>
# <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous"> 
# <style><!DOCTYPE html>
# 
# h1 {text-align: center;}
# h2 {text-align: center;}
# h3 {text-align: center;}
# p {text-align: center;}
# div {text-align: center;}
# </style>
# 
# <style>
# .myDiv {
#   border: 10px outset lightblue;
#   background-color: lightblue;    
#   text-align: center;
# }
# 
# .button {
#   background-color: lightblue;
#   border: none;
#   color: white;
#   padding: 16px 32px;
#   text-align: center;
#   text-decoration: none;
#   display: inline-block;
#   font-size: 16px;
#   margin: 4px 2px;
#   transition-duration: 0.4s;
#   cursor: pointer;
# 
# }
# .button1 {
#   background-color: white; 
#   color: black; 
#   border: 5px solid darkblue;
# }
# 
# .button1:hover {
#   background-color: #f64949ab;
#   color: white;
# }
# 
# .button2 {
#   background-color: white; 
#   color: black; 
#   border: 5px solid darkblue;
# }
# 
# .button2:hover {
#   background-color: #37bea5;
#   color: white;
# }
# 
# .button3 {
#   background-color: white; 
#   color: black; 
#   border: 5px solid darkblue;
# }
# 
# .button3:hover {
#   background-color: #9c0e9d;
#   color: white;
# }
# 
# .button4 {
#   background-color: white; 
#   color: black; 
#   border: 5px solid darkblue;
# }
# 
# .button4:hover {
#   background-color: #b1c711;
#   color: white;
# }
# 
# .button5 {
#   background-color: white; 
#   color: black; 
#   border: 5px solid darkblue;
# }
# 
# .button5:hover {
#   background-color: #740821;
#   color: white;
# }
# 
# .button6 {
#   background-color: white; 
#   color: black; 
#   border: 5px solid darkblue;
# }
# 
# .button6:hover {
#   background-color: #0eab60;
#   color: white;
# }
# </style>
# </head>
# 
# <body>
#       
# <div class="myDiv" style="background-color:grey;" >
#            
# <div class="col-md-12">
# <center><p style="font-size:40px;color:white;margin-top:10px;">Poornima Institute of Engineering & Technology</p></center> 
# <center><p style="font-size:30px;color:white;margin-top:10px;">Department of Computer Engineering</p></center> 
# <center><p style="font-size:25px;color:white;margin-top:10px;">2nd Midterm practical</p></center> 
# </div>
# 
# <div class="login">
# <h2 ><u>Analysis to Predict Driving behavior</u></h2>
# <h3><i><u>Developed by Nakul Singh Jadon</i></u></h3>
# <!-- Main Input For Receiving Query to our ML -->
# <form action="{{ url_for('predict')}}"method="get">
# 
# 
# <div class="form-floating mb-3">
# 
# <input type="number" class="form-control" id="AccX" name="AccX" step="any" min="-31.0" max="100.0" placeholder="0" required="required">
# <label for="floatingInput">Enter value of AccX</label>
# </div>
# <br>
# 
# <div class="form-floating mb-3">
# 
# <input type="number" class="form-control" id="AccY" name="AccY" step="any" min="-15.0" max="100.0" placeholder="0" required="required">
# <label for="floatingInput">Enter value of AccY</label>
# </div>
# <br>
# 
# <div class="form-floating mb-3">
# 
# <input type="number" class="form-control" id="AccZ" name="AccZ" step="any" min="-32.0" max="100.0" placeholder="0" required="required">
# <label for="floatingInput">Enter value of AccZ</label>
# </div>
# <br>
# 
# <div class="form-floating mb-3">
# 
# <input type="number" class="form-control" id="GyroX" name="GyroX" step="any" min="-4.0" max="100.0" placeholder="0" required="required">
# <label for="floatingInput">Enter value of GyroX</label>
# </div>
# <br>
# 
# <div class="form-floating mb-3">
# 
# <input type="number" class="form-control" id="GyroY" name="GyroY" step="any" min="-23.0" max="100.0" placeholder="0" required="required">
# <label for="floatingInput">Enter value of GyroY</label>
# </div>
# <br>
# 
# <div class="form-floating mb-3">
# 
# <input type="number" class="form-control" id="GyroZ" name="GyroZ" step="any" min="-7.0" max="100.0" placeholder="0" required="required">
# <label for="floatingInput">Enter value of GyroZ</label>
# </div>
# <br>
# 
# 
# 
# <div class="form-floating mb-3">
# 
# <input type="number" class="form-control" id="Timestamp" name="Timestamp" step="any" min="0.0" max="5000.0" placeholder="0" required="required">
# <label for="floatingInput">Enter value of Timestamp</label>
# </div>
# <br>
# 
# <br>
#  <div class="col-md-4" style="color: #FFF;">
#                 <label for="inputState" class="form-label">Choose a Model</label>
#                 <select id="Model" name ="Model" step = "any" class="form-select" required>
#                     <option selected>Logistic Prediction</option>
#                     <option>KNN Prediction</option>
#                     <option>Decision Tree Prediction</option>
#                     <option>Random Forest Prediction</option>
#                     <option>SVM Prediction</option>
#                 </select>
#             </div>
#             <br>
#             <div class="col-12">
#                 <button type="submit" value="NB" name="NB" class="btn btn-outline-danger">Submit</button>
#             </div>
# </form>
# <br>
# <br>
# 
# <div class="myDiv">
# <h2>
# {{ prediction_text }}
# </h2>
# </div>
# 
# </div>
# 
# <div class="" style="background-color:green;" >
# <div class="clearfix">
#            
# <div class="col-md-12">
#  <center><p style="font-size:25px;color:white;margin-top:20px;border: 10px outset #37b486;">Experiment Performed in Summer internship 2022 from 27 June to 8 August </p></center> 
# </div>
# 
# </div>
# </div>
# </body>

!pip install pyngrok

!ngrok authtoken 2DWmV9GbrXKKZPz1Cn38GMIQWqP_piauUEK72HhYBmNxdaNs

import numpy as np
from flask import Flask, request, jsonify, render_template
from flask_ngrok import run_with_ngrok
import pickle


app = Flask(__name__)

model0 = pickle.load(open('/content/drive/My Drive/Colab Notebooks/Logistic_MajorX.pkl','rb'))
model1 = pickle.load(open('/content/drive/My Drive/Colab Notebooks/KNN_MajorX.pkl','rb'))
model2 = pickle.load(open('/content/drive/My Drive/Colab Notebooks/Decision-Tree_MajorX.pkl','rb'))
model3 = pickle.load(open('/content/drive/My Drive/Colab Notebooks/Random-Forest_MajorX.pkl','rb'))
model4 = pickle.load(open('/content/drive/My Drive/Colab Notebooks/SVM_MajorX.pkl','rb'))
run_with_ngrok(app)

@app.route('/')
def home():
  
    return render_template("index.html")
  
@app.route('/predict',methods=['GET'])

def predict():
    
     AccX = float(request.args.get('AccX'))
     AccY = float(request.args.get('AccY'))
     AccZ = float(request.args.get('AccZ'))
     GyroX = float(request.args.get('GyroX'))
     GyroY = float(request.args.get('GyroY'))
     GyroZ  = float(request.args.get('GyroZ'))
     Timestamp = float(request.args.get('Timestamp'))
    


     Model = str(request.args.get('Model'))

     if Model=='Logistic Prediction':
      prediction = model0.predict([[ AccX   ,   AccY   ,   AccZ  ,   GyroX   ,  GyroY  ,   GyroZ , Timestamp]])
    
     elif Model=='KNN Prediction':
      prediction = model1.predict([[AccX   ,   AccY   ,   AccZ  ,   GyroX   ,  GyroY  ,   GyroZ , Timestamp]])
    
     elif Model=='Decision Tree Prediction':
      prediction = model2.predict([[AccX   ,   AccY   ,   AccZ  ,   GyroX   ,  GyroY  ,   GyroZ , Timestamp]])

     elif Model=='Random Forest Prediction':
      prediction = model3.predict([[AccX   ,   AccY   ,   AccZ  ,   GyroX   ,  GyroY  ,   GyroZ , Timestamp]])

     else:
      prediction = model4.predict([[AccX   ,   AccY   ,   AccZ  ,   GyroX   ,  GyroY  ,   GyroZ , Timestamp]])

    
     if prediction == [0]:
      text = "Driving Behavior is slow"
     elif prediction == [1]:
      text = "Driving Behavior is Normal"
     else:
      text = "Driving Behavior is Aggressive"
      

     return render_template('index.html', prediction_text= 'Prediction says: {}'.format(text))
if __name__=="__main__":

    app.run()

